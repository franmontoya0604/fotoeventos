generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean   @default(false)
  isPhotographer Boolean   @default(false)
  slug           String?
  accounts       Account[]
  sessions       Session[]
  albums         Album[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id           Int         @id @default(autoincrement())
  name         String?
  content      String?
  slug         String?     @unique
  imageUrl     String?
  status       AlbumStatus @default(DRAFT)
  eventDate    DateTime?
  ownerId      String
  endpoint     String?
  created      DateTime    @default(now())
  updated      DateTime    @updatedAt
  package      Boolean     @default(true)
  price        Int?
  pricePackage Int?
  pricePrint   Int?
  print        Boolean     @default(false)
  bucketId     String?
  bucketName   String?
  user         User        @relation(fields: [ownerId], references: [id])
  Photo        Photo[]
  Prepaid      Prepaid[]

  @@index([slug])
}

model Photo {
  id               Int           @id @default(autoincrement()) @db.UnsignedInt
  original_name    String?       @db.VarChar(64)
  thumbnail_url    String?       @db.VarChar(255)
  full_url         String?       @db.VarChar(255)
  medium_url       String?       @db.VarChar(255)
  mod_url          String?       @db.VarChar(255)
  status           Photo_status?
  album_id         Int?
  thumbnail_height Int?
  thumbnail_width  Int?
  is_starred       Boolean?      @default(false)
  fileId           String?       @db.VarChar(255)
  PhotoTag         PhotoTag[]
  album            Album?        @relation(fields: [album_id], references: [id])

  @@index([album_id], map: "album_id")
  @@index([status], map: "status")
}

model PhotoTag {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  photoid Int?   @db.UnsignedInt
  tagid   Int?   @db.UnsignedInt
  Photo   Photo? @relation(fields: [photoid], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "PhotoTag_ibfk_1")
  Tags    Tags?  @relation(fields: [tagid], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "PhotoTag_ibfk_2")

  @@index([photoid], map: "photoid")
  @@index([tagid], map: "tagid")
}

model Tags {
  id       Int        @id @default(autoincrement()) @db.UnsignedInt
  tag      String?    @db.VarChar(64)
  userid   Int?
  email    String?    @db.VarChar(64)
  phone    String?    @db.VarChar(64)
  albumid  Int?
  PhotoTag PhotoTag[]
  Prepaid  Prepaid[]

  @@index([tag], map: "tag")
  @@index([userid], map: "userid")
}

model Prepaid {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  tagid     Int?   @db.UnsignedInt
  albumid   Int?
  userid    Int?
  firstname String?    @db.VarChar(64)
  lastname  String?    @db.VarChar(64)
  email     String?    @db.VarChar(64)
  phone     String?    @db.VarChar(64)
  voucher   String?    @db.VarChar(10)
  sent      Boolean?   @default(false)
  burned    Boolean?   @default(false)
  burnedat  DateTime?
  created   DateTime    @default(now())
  updated   DateTime    @updatedAt
  album     Album?      @relation(fields: [albumid], references: [id])
  tags       Tags?        @relation(fields: [tagid], references: [id])

  @@index([tagid], map: "tagid")
  @@index([albumid], map: "albumid")
  @@index([userid], map: "userid")
  @@index([voucher], map: "voucher")
}

enum AlbumStatus {
  DRAFT
  PUBLISHED
  HIDDEN
  DELETED
}

enum Photo_status {
  DRAFT
  PUBLISHED
  DELETED
  APPROVED
  DISCARDED
  PROCESSING
}
